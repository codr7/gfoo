42 .. check: =(42) _

42 'fail _ check: =(42)

NIL check: is(NIL)

!T check: is(F)

T and: 42 check: =(42)
F and: 42 check: =(F)

F or: 42 check: =(42)
42 or: F check: =(42)

41 +1 check: =(42)
43 -1 check: =(42)

35 +(7) check: =(42)
42 -(7) check: =(35)
6 *(7) check: =(42)

42 check: is(42)

1 check: <(2)
1 check: <=(2)
1 check: <=(1)

2 check: >(1)
2 check: >=(1)
1 check: >=(1)

42 bool check: =(T)

!42 +(42) check: =(0)

[3 ...] check: =([0 1 2])

42 to-string check: =("42")

"" bool check: =(F)

length("abc") check: =(3)

["foo"...] check: =([\'f \'o \'o])

!,1 2 check: =(,!1 !2)

![1 2 3] check: =([!1 !2 !3])

peek([]) check: is(NIL)

peek([1 2 3]..)
check: is(3)
check: =([1 2 3])

pop([]) check: is(NIL)

pop([1 2 3]..)
check: is(3)
check: =([1 2])

[1 2].. push(3) check: =([1 2 3])
length([1 2 3]) check: =(3)

[1 2 [3 4 5]...] check: =([1 2 3 4 5])

{
  trait: Foo (Number)
  Foo check: isa(Number)
  
  type: Bar (Foo) Int
  Bar check: isa(Foo)
  Bar check: isa(Int)
  
  method: baz(x Foo;) 'ok

  42 as-bar ..
  typeof check: =(Bar)
  baz check: =('ok)
}

{
  let: foo 'bar

  {
    let: foo 'baz
    foo check: =('baz)
  }
  
  foo check: =('bar)
}

{
  42 let: foo ()
  foo check: =(42)
}
  
{
  define: foo 'bar
  foo check: =('bar)
}

[3 times: 42] check: =([42 42 42])
[3 for: _ *(2)] check: =([0 2 4])
[3 for: v (v *(2))] check: =([0 2 4])
[3 map: *(2)...] check: =([0 2 4])
[3 map: _...] check: =([])
[2 map: (_ 'foo 'bar)...] check: =(['foo 'bar 'foo 'bar])
[['foo 'bar 'baz] map: (.. is('bar) if: (_ NIL))...] check: =(['foo])

/:(x) !x
call: (42) check: =(!42)

{
  {
    let: foo 42
    /:() foo
  }

  let: foo 'fail
  call check: =(42)
}

{
  let: foo 42
  method: bar(;Int) foo
  bar check: =(42)
}

{
  method: foo(;Int) 42
  !foo check: =(!42)
}

{
  method: foo(x Int; Pair) {,'int x}
  method: foo(x String; Pair) {,'string x}
  foo(42) check: =(,'int 42)
  foo("bar") check: =(,'string "bar")
}

{
  method: foo((x y) Int;Int) {x +(y)}
  foo(35 7) check: =(42)
}

{
  method: foo(_ Int; Id) (_ 'int)
  method: foo(_ String; Id) (_ 'string)

  foo(42) check: =('int)
  foo("bar") check: =('string)
}

{
  method: min(x Any y 0; 0) {x <=(y) ?: x y}
  min("foo" "bar") check: =("bar")
}

{
  method: bar(;Id) 'outer

  {
    method: bar(;Id) 'inner
    bar check: =('inner)
  }

  bar check: =('outer)
}

{
  method: foo ((x y) Int;Int) {x *(y)}
  method: bar (x Int y Slice; Slice) {[y map: foo(x)...]}
  42 [1 2 3] bar check: =([42 84 126])
}

thread: (35) {+(7)}
wait check: =(42)

{
  let: t (thread: () {pause: 1 pause: 2 3})
  t wait check: =(1)
  t wait check: =(2)
  t wait check: =(3)
}

{
  macro: foo () {'(let: #bar 42)}
  foo foo
}

T if: 'ok check: =('ok)
F else: 'ok check: =('ok)