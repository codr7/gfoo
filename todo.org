* add lambda: macro
** arg list + body
** update readme

scope = scope.Clone()
ops, err := scope.Compile(self.body, nil)
return NewVal(&TLambda, NewLambda(self.body, ops, scope)), nil

* add Unquote like Quote using @
** return form as is in Quote
* lazy alloc scope bindings
* add quote macro/op
** quote top of stack
* add pairs
** a b,
** add pair form
* add Trait/TraitBase
** use as parent for Type/TypeBase
** add TAny
* add function/method
** trait/index/val args
** trait/index rets
** add function/method types
** add dispatch op
** always run in separate scope
*** peel of scope body like thread

method: foo (a b) {...}
method: foo (a Any, b Any) {...}

* add first class scopes
** add Scope type
** add scope macro
*** return clone
** add new(Scope) method
*** return empty scope
* add Splat op
** add Type.Splat
*** implement for Int
**** 3... -> 0 1 2
*** implement for Slice
*** implement for String
**** add Char type
** add ... macro
