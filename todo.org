* remove do: macro
** drop pop-support from scope_op
** signal unknown identifiers in id compile
** replace Extend with lookup of identifiers with Nil values
** update readme
* add iter module
** move next/~
** add value(val;iter) method
*** chain instead of b closure in enojs.gf
*** compare performance
** add separate methods items/chars/bytes/fields
*** update readme
* use path package to extract filenames
* move Thread call imp to wait method
** add TTarget trait
*** derive lambda/method/function
*** change arg type in call method
** update readme
* use separate thread to read files
* add bang line support
* implement denojs.gf
* --
* add string dump support for \n
* add trait: (...) X
** create trait with parents
* add trait parents to type:
* add support for group binding to let:/define:
* add try:/catch:/fail
** require try: or catch: if code contains fail
** forward error on try:
* add Table
** key/records
* add Fix
** copy from gfoo
* add String interpolation
** read form following @ & print last value
** add Writer type
** add Type.Print(Val, Writer) error
** add Type.String() string
** add print method
** use bytes.Buffer
** compile form, call: Print with buffer, call: Print with buffer/string, call: String with buffer 

let: foo 42 "@(foo)bar"

* add Loop op
** add Break/Next error
*** trap in Loop.Evaluate
** add while macro to lib/abc

macro: while: (cond body) {
  '(loop: (@cond else: break @body))
}

* add optional type literals
** create optional if lookup for X? fails
* add union type literals
** parse X|Y as union
*** handle in ParseId
