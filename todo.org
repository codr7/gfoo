* add interactions/dump/say to readme
* ---
* add negation using !
** NotForm
** compile value 
** emit Not op
*** call .Bool
* add and/or macros
* ---
* add trait: (...) X
** create trait with parents
* add trait parents to type:
* add Maybe types
** handle ? in ParseId
** create types on demand that inherit from X & TOptional
** use Type.New
* --
* add Table
** key/records
* add Ratio type
** add math module
** use big.Rat
** add Int / with Ratio result
* add String interpolation
** read form following @ & print last value
** add Writer type
** add Type.Print(Val, Writer) error
** add Type.String() string
** add print method
** use bytes.Buffer
** compile form, call: Print with buffer, call: Print with buffer/string, call: String with buffer 

let: foo 42 "@(foo)bar"

* add Loop op
** add Break/Next error
*** trap in Loop.Evaluate
** add while macro to lib/abc

macro: while: (cond body) {
  '(loop: (@cond else: break @body))
}

* add union types
** add Union with list of types
** parse X|Y as union
*** handle in ParseId
** add Type.ReverseIsa
*** call Isa for all types
** replace uses of Isa with ReverseIsa
