* add tests
** add scope.Load(path)
** call on args in main
* add pairs
** a b,
** add pair form
* add loop/break
** add loop: macro/op
** add break error
*** Error at....: Break outside of loop
*** handle in Loop.Evaluate
* add Trait/TraitBase
** use as parent for Type/TypeBase
** add TAny
* add function/method
** trait/index/val args
** trait/index rets
** add function/method types
** add dispatch op
** always run in separate scope
*** peel of scope body like thread

method: foo (a b) {...}
method: foo (a Any, b Any) {...}

* add first class scopes
** add scope macro
*** return clone
** add new(Scope) method
*** return empty scope
** add dot access
*** foo.let: bar 42
* add Splat op
** add Type.Splat
*** implement for Int
**** 3... -> 0 1 2
*** implement for Slice
*** implement for String
**** add Char type
** add ... macro
