* add Rational
** use big.Rat
** add Integer /
*** create Rational result
* finish Method.Call
** walk function.methods from back to front
** add Type.Isa(parent)
* add negation using !
** NotForm
** compile value 
** emit Not op
*** call .Bool
* add String interpolation
** read form following @ & print last value
** add Writer type
** add Type.Print(Val, Writer) error
** add Type.String() string
** add print method
** use bytes.Buffer
** compile form, call: Print with buffer, call: Print with buffer/string, call: String with buffer 

let foo 42 "@(foo)bar"

* add Loop op
** add Break/Next error
*** trap in Loop.Evaluate
** add while macro to lib/abc

macro: while: (cond body) {
  '(loop: (@cond else: break @body))
}

* add first class scopes
** add scope method
*** return clone
** add new(Scope) method
*** return empty scope
** add scope: macro
*** add ScopeOp.pop bool
** add dot access in Id
*** pop scope if first char == '.' and second char != '.'

let: foo new(scope) 
foo.let: bar 42 
foo scope: {bar}

* add Splat op
** add Type.Splat
*** implement for Int
**** 3... -> 0 1 2
*** implement for Slice
*** implement for String
**** add Char type
** add ... macro
